// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: String.fromEnvironment("netlify_web_apiKey"),
    appId: String.fromEnvironment("netlify_appId"),
    messagingSenderId: String.fromEnvironment("netlify_messagingSenderId"),
    projectId: String.fromEnvironment("netlify_projectId"),
    authDomain: String.fromEnvironment("netlify_authDomain"),
    storageBucket: String.fromEnvironment("netlify_storageBucket"),
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: String.fromEnvironment("netlify_android_apiKey"),
    appId: String.fromEnvironment("netlify_appId"),
    messagingSenderId: String.fromEnvironment("netlify_messagingSenderId"),
    projectId: String.fromEnvironment("netlify_projectId"),
    storageBucket: String.fromEnvironment("netlify_storageBucket"),
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: String.fromEnvironment("netlify_ios_apiKey"),
    appId: String.fromEnvironment("netlify_appId"),
    messagingSenderId: String.fromEnvironment("netlify_messagingSenderId"),
    projectId: String.fromEnvironment("netlify_projectId"),
    storageBucket: String.fromEnvironment("netlify_storageBucket"),
    iosClientId: String.fromEnvironment("netlify_iosClientId"),
    iosBundleId: String.fromEnvironment("netlify_iosBundleId"),
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: String.fromEnvironment("netlify_macos_apiKey"),
    appId: String.fromEnvironment("netlify_appId"),
    messagingSenderId: String.fromEnvironment("netlify_messagingSenderId"),
    projectId: String.fromEnvironment("netlify_projectId"),
    storageBucket: String.fromEnvironment("netlify_storageBucket"),
    iosClientId: String.fromEnvironment("netlify_iosClientId"),
    iosBundleId: String.fromEnvironment("netlify_iosBundleId"),
  );
}